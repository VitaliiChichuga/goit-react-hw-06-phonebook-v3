{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","components/Container/Container.js","redux/contacts/actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","children","className","s","container","defaultProps","addContact","createAction","deleteContact","filterContact","getContactsList","state","contacts","getFilter","filter","ContactForm","contactList","useSelector","dispatch","useDispatch","numberInputId","uuid","useState","name","setName","number","setNumber","form","onSubmit","e","preventDefault","newContact","id","find","toLowerCase","alert","type","value","onChange","target","pattern","title","required","button","size","ContactList","arrOfContacts","visibleContacts","contact","includes","list","map","item","text","onClick","propType","clickOnBtn","PropTypes","func","Filter","currentTarget","App","length","contactsListReducer","createReducer","payload","filterReducer","_","combineReducers","persistConfig","key","version","storage","blacklist","rootReducer","persistedContactsReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0833dc06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1aEe5\",\"button\":\"ContactForm_button__YtxWl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1E8IR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__55MFf\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={s.container}>{children}</div>\n);\n\nContainer.defaultProps = {\n  children: [],\n};\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contact/add');\nexport const deleteContact = createAction('contact/delete');\nexport const filterContact = createAction('contactList/filter');\n","export const getContactsList = state => state.contacts;\nexport const getFilter = state => state.filter;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useState } from 'react';\nimport { IoIosPersonAdd } from 'react-icons/io';\nimport s from './ContactForm.module.css';\nimport { v4 as uuid } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/actions';\nimport { getContactsList } from '../../redux/contacts/contacts-selectors';\n\nconst ContactForm = () => {\n  const contactList = useSelector(getContactsList);\n  const dispatch = useDispatch();\n\n  // const nameInputId = uuid();\n  const numberInputId = uuid();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const handleChangeNumber = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: uuid(),\n      name: name,\n      number: number,\n    };\n\n    const renderedNames = contactList.find(\n      ({ name }) => name.toLowerCase() === newContact.name.toLowerCase(),\n    );\n    if (renderedNames) {\n      alert(`${newContact.name} is already on contacts`);\n      setName('');\n      setNumber('');\n      return;\n    }\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        <span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChangeName}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        <span>Number</span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          id={numberInputId}\n          onChange={handleChangeNumber}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        <IoIosPersonAdd size={50} />\n      </button>\n    </form>\n  );\n};\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BsFillFileEarmarkExcelFill } from 'react-icons/bs';\nimport s from './ContactList.module.css';\nimport { deleteContact } from '../../redux/contacts/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContactsList } from '../../redux/contacts/contacts-selectors';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const getVisibleContact = (arrOfContacts, filter) => {\n    return arrOfContacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const visibleContacts = getVisibleContact(\n    useSelector(getContactsList),\n    useSelector(getFilter),\n  );\n  return (\n    <ul className={s.list}>\n      {visibleContacts.map(({ name, id, number }) => (\n        <li key={id} className={s.item}>\n          <p className={s.text}>{name}:</p>\n          <span>{number}</span>\n          <button\n            className={s.button}\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            <BsFillFileEarmarkExcelFill className={s.button} />\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propType = {\n  clickOnBtn: PropTypes.func,\n};\nexport default ContactList;\n","import s from './Filter.module.css';\nimport { filterContact } from '../../redux/contacts/actions';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <label>\n      <p className={s.text}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        onChange={e => dispatch(filterContact(e.currentTarget.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import Container from 'components/Container';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from './Filter';\nimport { getContactsList } from '../redux/contacts/contacts-selectors';\nimport { useSelector } from 'react-redux';\n\nconst App = () => {\n  const contactList = useSelector(getContactsList);\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {contactList.length > 0 ? (\n        <ContactList />\n      ) : (\n        <p>Your phonebook is empty. Please add contact.</p>\n      )}\n    </Container>\n  );\n};\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { addContact, deleteContact, filterContact } from './actions';\n\nconst initialState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\nexport const contactsListReducer = createReducer(initialState, {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nexport const filterReducer = createReducer('', {\n  [filterContact]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contactsListReducer,\n  filterReducer, //\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { contactsListReducer, filterReducer } from './contacts/reducers';\n\nimport storage from 'redux-persist/lib/storage';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst persistConfig = {\n  key: 'contacts',\n  version: 1,\n  storage,\n  blacklist: ['filter'],\n};\nexport const rootReducer = combineReducers({\n  contacts: contactsListReducer,\n  filter: filterReducer,\n});\nconst persistedContactsReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedContactsReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__JoyOW\",\"item\":\"ContactList_item__kJYTR\",\"text\":\"ContactList_text__1NkRr\",\"button\":\"ContactList_button__zIE6o\"};"],"sourceRoot":""}